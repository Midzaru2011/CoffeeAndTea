name: GitOps - Coffee and Tea Deployment

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    tags:
      - 'v*'
    paths:
      - 'src/**'
      - 'coffee-and-tea/**'
      - 'argocd/**'
      - 'environments/**'
      - '.github/workflows/gitops.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'coffee-and-tea/**'
      - 'argocd/**'
      - 'environments/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: coffee-and-tea
  ARGOCD_SERVER: argocd.example.com
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

jobs:
  # Validate code and build
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Run tests
        run: mvn clean test -B
      
      - name: Run security scan with SpotBugs
        run: mvn spotbugs:check -B
        continue-on-error: true
      
      - name: Build application
        run: mvn clean package -DskipTests -B
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar
          retention-days: 1

  # Build and push Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: target/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Validate Helm charts
  validate-helm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.3'
      
      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
      
      - name: Validate Helm chart
        run: |
          helm dependency update coffee-and-tea/
          helm lint coffee-and-tea/
      
      - name: Template Helm chart (development)
        run: |
          helm template coffee-and-tea coffee-and-tea/ \
            --values environments/development/values.yaml \
            --output-dir /tmp/helm-dev
      
      - name: Template Helm chart (production)
        run: |
          helm template coffee-and-tea coffee-and-tea/ \
            --values environments/production/values.yaml \
            --output-dir /tmp/helm-prod

  # Validate ArgoCD manifests
  validate-argocd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Validate ArgoCD manifests
        run: |
          kubectl apply --dry-run=client -k argocd/
      
      - name: Validate individual manifests
        run: |
          for file in argocd/projects/*.yaml argocd/applications/*.yaml; do
            if [[ -f "$file" ]]; then
              kubectl apply --dry-run=client -f "$file"
            fi
          done

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-image.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to development (automatic)
  deploy-development:
    runs-on: ubuntu-latest
    needs: [build-image, validate-helm, validate-argocd]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: http://coffee-dev.local
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.4/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
      
      - name: Deploy to ArgoCD
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd app sync coffee-and-tea-dev \
            --server ${{ env.ARGOCD_SERVER }} \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --insecure
      
      - name: Wait for deployment
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd app wait coffee-and-tea-dev \
            --server ${{ env.ARGOCD_SERVER }} \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --insecure \
            --timeout 300

  # Deploy to staging (automatic)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-image, validate-helm, validate-argocd]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://coffee-staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.4/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
      
      - name: Update staging image tag
        run: |
          # Update image tag in staging configuration
          sed -i 's/tag: "staging"/tag: "${{ github.sha }}"/' environments/staging/values.yaml
      
      - name: Commit staging updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add environments/staging/values.yaml
          git commit -m "Update staging image to ${{ github.sha }}" || exit 0
          git push
      
      - name: Deploy to ArgoCD
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd app sync coffee-and-tea-staging \
            --server ${{ env.ARGOCD_SERVER }} \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --insecure

  # Deploy to production (manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-image, validate-helm, validate-argocd, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://coffee.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.4/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Update production configuration
        run: |
          # Update image tag and target revision for production
          sed -i 's/tag: "2.1.2"/tag: "${{ steps.version.outputs.VERSION }}"/' environments/production/values.yaml
          sed -i 's/targetRevision: "v2.1.2"/targetRevision: "${{ github.ref_name }}"/' argocd/applications/coffee-and-tea-production.yaml
      
      - name: Commit production updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add environments/production/values.yaml argocd/applications/coffee-and-tea-production.yaml
          git commit -m "Update production to version ${{ steps.version.outputs.VERSION }}" || exit 0
          git push
      
      - name: Deploy to ArgoCD (Manual sync required)
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          echo "Production deployment updated. Manual sync required in ArgoCD UI."
          echo "Application: coffee-and-tea-production"
          echo "Version: ${{ steps.version.outputs.VERSION }}"
          
          # Note: Production requires manual sync for safety
          # argocd app sync coffee-and-tea-production --server ${{ env.ARGOCD_SERVER }} --auth-token $ARGOCD_AUTH_TOKEN --insecure

  # Notify teams
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#coffee-and-tea-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true